/** @hidden */
export declare const createEventEmitter: () => import("mitt").Emitter<Amity.Events>;
/**
 * Wraps the websocket events into the client's event emitter for
 * abstraction of transport.
 *
 * @param ws A websocket connection to listen from
 * @param emitter An event emitter to wire the events to
 *
 * @category Transport
 * @hidden
 */
export declare const proxyWebsocketEvents: (ws: Amity.Client['ws'], emitter: Amity.Client['emitter']) => void;
export declare const proxyMqttEvents: (mqttClient: Amity.Client['mqtt'], emitter: Amity.Client['emitter']) => void;
/**
 * Standardize the subscription of SSE through web sockets
 *
 * @param client The current client for which to subscribe the event to
 * @param namespace A unique name for the logger
 * @param event The websocket event name
 * @param fn A wrapper for the callback.
 * @returns A dispose function to unsubscribe to the event
 *
 * @category Transport
 * @hidden
 */
export declare const createEventSubscriber: <T extends "disconnected" | "error" | "connect_error" | "reconnect_error" | "reconnect_failed" | "sessionStateChange" | "tokenExpired" | "connect" | "message" | "disconnect" | "close" | "end" | "reconnect" | "video-streaming.didStart" | "video-streaming.didRecord" | "video-streaming.didStop" | "video-streaming.didFlag" | "video-streaming.didTerminate" | "user.didGlobalBan" | "channel.created" | "channel.updated" | "channel.deleted" | "channel.setMuted" | "channel.joined" | "channel.left" | "channel.membersAdded" | "channel.membersRemoved" | "channel.banned" | "channel.unbanned" | "message-feed.created" | "message-feed.updated" | "message-feed.deleted" | "message.created" | "message.updated" | "message.deleted" | "message.flagged" | "message.unflagged" | "message.flagCleared" | "message.reactionAdded" | "message.reactionRemoved" | "community.created" | "community.updated" | "community.deleted" | "community.joined" | "community.left" | "community.userAdded" | "community.userRemoved" | "community.userChanged" | "community.userBanned" | "community.userUnbanned" | "community.roleAdded" | "community.roleRemoved" | "post.created" | "post.updated" | "post.deleted" | "post.approved" | "post.declined" | "post.flagged" | "post.unflagged" | "post.addReaction" | "post.removeReaction" | "comment.created" | "comment.updated" | "comment.deleted" | "comment.flagged" | "comment.unflagged" | "comment.addReaction" | "comment.removeReaction" | "user.fetched" | "user.updated" | "user.deleted" | "user.flagged" | "user.unflagged" | "user.flagCleared" | "follow.created" | "follow.requested" | "follow.accepted" | "follow.unfollowed" | "follow.requestCanceled" | "follow.requestDeclined" | "follow.followerDeleted" | "marker.marked-message" | "marker.feed-updated" | "marker.user-sync" | "marker.userFeed-updated" | "story.created" | "story.updated" | "story.deleted" | "story.flagged" | "story.unflagged" | "story.reactionAdded" | "story.reactionRemoved" | "local.channel.updated" | "local.channel.fetched" | "local.channel-moderator.role-added" | "local.channel-moderator.role-removed" | "local.message.created" | "local.message.updated" | "local.message.deleted" | "local.message.fetched" | "local.message-feed.updated" | "local.message-feed.fetched" | "local.message-feed.deleted" | "poll.updated" | "poll.deleted" | "local.feedMarker.fetched" | "local.channelMarker.fetched" | "local.channelMarker.updated" | "local.subChannelMarker.fetched" | "local.subChannelMarker.updated" | "local.messageMarker.fetched" | "local.userMarker.fetched" | "local.userMessageFeedMarker.fetched" | "local.channel.resolved" | "local.userMessageFeedMarkers.resolved" | "local.subChannelUnread.updated" | "local.channelUnreadInfo.updated" | "local.channelUnread.updated" | "local.story.created" | "local.story.updated" | "local.story.deleted" | "local.story.flagged" | "local.story.unflagged" | "local.story.reactionAdded" | "local.story.reactionRemoved" | "local.story.error" | "local.story.reload" | "local.notificationTraySeen.updated" | "local.notificationTrayItem.updated" | "tokenTerminated" | "unreadCountEnabled" | "local.post.updated" | "local.post.deleted" | "local.post.addReaction" | "local.post.removeReaction" | "local.comment.created" | "local.comment.deleted" | "local.comment.addReaction" | "local.comment.removeReaction" | "local.community.joined" | "local.community.left" | "local.community.roleAdded" | "local.community.roleRemoved" | "local.community.userAdded" | "local.community.userRemoved" | "local.follow.created" | "local.follow.requested" | "local.follow.accepted" | "local.follow.unfollowed" | "local.follow.requestDeclined">(client: Amity.Client, namespace: string, event: T, fn: Amity.Listener<Amity.Events[T]>) => Amity.Unsubscriber;
export declare const createMqttMessageSubscriber: <T extends "disconnected" | "error" | "connect_error" | "reconnect_error" | "reconnect_failed" | "sessionStateChange" | "tokenExpired" | "connect" | "message" | "disconnect" | "close" | "end" | "reconnect" | "video-streaming.didStart" | "video-streaming.didRecord" | "video-streaming.didStop" | "video-streaming.didFlag" | "video-streaming.didTerminate" | "user.didGlobalBan" | "channel.created" | "channel.updated" | "channel.deleted" | "channel.setMuted" | "channel.joined" | "channel.left" | "channel.membersAdded" | "channel.membersRemoved" | "channel.banned" | "channel.unbanned" | "message-feed.created" | "message-feed.updated" | "message-feed.deleted" | "message.created" | "message.updated" | "message.deleted" | "message.flagged" | "message.unflagged" | "message.flagCleared" | "message.reactionAdded" | "message.reactionRemoved" | "community.created" | "community.updated" | "community.deleted" | "community.joined" | "community.left" | "community.userAdded" | "community.userRemoved" | "community.userChanged" | "community.userBanned" | "community.userUnbanned" | "community.roleAdded" | "community.roleRemoved" | "post.created" | "post.updated" | "post.deleted" | "post.approved" | "post.declined" | "post.flagged" | "post.unflagged" | "post.addReaction" | "post.removeReaction" | "comment.created" | "comment.updated" | "comment.deleted" | "comment.flagged" | "comment.unflagged" | "comment.addReaction" | "comment.removeReaction" | "user.fetched" | "user.updated" | "user.deleted" | "user.flagged" | "user.unflagged" | "user.flagCleared" | "follow.created" | "follow.requested" | "follow.accepted" | "follow.unfollowed" | "follow.requestCanceled" | "follow.requestDeclined" | "follow.followerDeleted" | "marker.marked-message" | "marker.feed-updated" | "marker.user-sync" | "marker.userFeed-updated" | "story.created" | "story.updated" | "story.deleted" | "story.flagged" | "story.unflagged" | "story.reactionAdded" | "story.reactionRemoved" | "local.channel.updated" | "local.channel.fetched" | "local.channel-moderator.role-added" | "local.channel-moderator.role-removed" | "local.message.created" | "local.message.updated" | "local.message.deleted" | "local.message.fetched" | "local.message-feed.updated" | "local.message-feed.fetched" | "local.message-feed.deleted" | "poll.updated" | "poll.deleted" | "local.feedMarker.fetched" | "local.channelMarker.fetched" | "local.channelMarker.updated" | "local.subChannelMarker.fetched" | "local.subChannelMarker.updated" | "local.messageMarker.fetched" | "local.userMarker.fetched" | "local.userMessageFeedMarker.fetched" | "local.channel.resolved" | "local.userMessageFeedMarkers.resolved" | "local.subChannelUnread.updated" | "local.channelUnreadInfo.updated" | "local.channelUnread.updated" | "local.story.created" | "local.story.updated" | "local.story.deleted" | "local.story.flagged" | "local.story.unflagged" | "local.story.reactionAdded" | "local.story.reactionRemoved" | "local.story.error" | "local.story.reload" | "local.notificationTraySeen.updated" | "local.notificationTrayItem.updated" | "tokenTerminated" | "unreadCountEnabled" | "local.post.updated" | "local.post.deleted" | "local.post.addReaction" | "local.post.removeReaction" | "local.comment.created" | "local.comment.deleted" | "local.comment.addReaction" | "local.comment.removeReaction" | "local.community.joined" | "local.community.left" | "local.community.roleAdded" | "local.community.roleRemoved" | "local.community.userAdded" | "local.community.userRemoved" | "local.follow.created" | "local.follow.requested" | "local.follow.accepted" | "local.follow.unfollowed" | "local.follow.requestDeclined">(client: Amity.Client, namespace: string, event: T, fn: (params: Record<string, unknown>) => void) => Amity.Unsubscriber;
/**
 * Wrapper around dispatch event
 *
 * @hidden
 */
export declare const fireEvent: <T extends "disconnected" | "error" | "connect_error" | "reconnect_error" | "reconnect_failed" | "sessionStateChange" | "tokenExpired" | "connect" | "message" | "disconnect" | "close" | "end" | "reconnect" | "video-streaming.didStart" | "video-streaming.didRecord" | "video-streaming.didStop" | "video-streaming.didFlag" | "video-streaming.didTerminate" | "user.didGlobalBan" | "channel.created" | "channel.updated" | "channel.deleted" | "channel.setMuted" | "channel.joined" | "channel.left" | "channel.membersAdded" | "channel.membersRemoved" | "channel.banned" | "channel.unbanned" | "message-feed.created" | "message-feed.updated" | "message-feed.deleted" | "message.created" | "message.updated" | "message.deleted" | "message.flagged" | "message.unflagged" | "message.flagCleared" | "message.reactionAdded" | "message.reactionRemoved" | "community.created" | "community.updated" | "community.deleted" | "community.joined" | "community.left" | "community.userAdded" | "community.userRemoved" | "community.userChanged" | "community.userBanned" | "community.userUnbanned" | "community.roleAdded" | "community.roleRemoved" | "post.created" | "post.updated" | "post.deleted" | "post.approved" | "post.declined" | "post.flagged" | "post.unflagged" | "post.addReaction" | "post.removeReaction" | "comment.created" | "comment.updated" | "comment.deleted" | "comment.flagged" | "comment.unflagged" | "comment.addReaction" | "comment.removeReaction" | "user.fetched" | "user.updated" | "user.deleted" | "user.flagged" | "user.unflagged" | "user.flagCleared" | "follow.created" | "follow.requested" | "follow.accepted" | "follow.unfollowed" | "follow.requestCanceled" | "follow.requestDeclined" | "follow.followerDeleted" | "marker.marked-message" | "marker.feed-updated" | "marker.user-sync" | "marker.userFeed-updated" | "story.created" | "story.updated" | "story.deleted" | "story.flagged" | "story.unflagged" | "story.reactionAdded" | "story.reactionRemoved" | "local.channel.updated" | "local.channel.fetched" | "local.channel-moderator.role-added" | "local.channel-moderator.role-removed" | "local.message.created" | "local.message.updated" | "local.message.deleted" | "local.message.fetched" | "local.message-feed.updated" | "local.message-feed.fetched" | "local.message-feed.deleted" | "poll.updated" | "poll.deleted" | "local.feedMarker.fetched" | "local.channelMarker.fetched" | "local.channelMarker.updated" | "local.subChannelMarker.fetched" | "local.subChannelMarker.updated" | "local.messageMarker.fetched" | "local.userMarker.fetched" | "local.userMessageFeedMarker.fetched" | "local.channel.resolved" | "local.userMessageFeedMarkers.resolved" | "local.subChannelUnread.updated" | "local.channelUnreadInfo.updated" | "local.channelUnread.updated" | "local.story.created" | "local.story.updated" | "local.story.deleted" | "local.story.flagged" | "local.story.unflagged" | "local.story.reactionAdded" | "local.story.reactionRemoved" | "local.story.error" | "local.story.reload" | "local.notificationTraySeen.updated" | "local.notificationTrayItem.updated" | "tokenTerminated" | "unreadCountEnabled" | "local.post.updated" | "local.post.deleted" | "local.post.addReaction" | "local.post.removeReaction" | "local.comment.created" | "local.comment.deleted" | "local.comment.addReaction" | "local.comment.removeReaction" | "local.community.joined" | "local.community.left" | "local.community.roleAdded" | "local.community.roleRemoved" | "local.community.userAdded" | "local.community.userRemoved" | "local.follow.created" | "local.follow.requested" | "local.follow.accepted" | "local.follow.unfollowed" | "local.follow.requestDeclined">(event: T, payload: Amity.Events[T]) => void;
//# sourceMappingURL=events.d.ts.map